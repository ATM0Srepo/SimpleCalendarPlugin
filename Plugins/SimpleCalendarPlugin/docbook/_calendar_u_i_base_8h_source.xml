<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__calendar_u_i_base_8h_source" xml:lang="en-US">
<title>CalendarUIBase.h</title>
<indexterm><primary>Plugins/SimpleCalendarPlugin/Source/SimpleCalendarPlugin/Private/CalendarUIBase.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="preprocessor">#include&#32;&quot;CoreMinimal.h&quot;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&quot;Blueprint/UserWidget.h&quot;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&quot;Components/EditableTextBox.h&quot;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&quot;TimerManager.h&quot;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;Engine/World.h&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;CalendarUIBase.generated.h&quot;</emphasis>
9 
13 UCLASS()
14 class&#32;<link linkend="_class_u_calendar_u_i_base">UCalendarUIBase</link>&#32;:&#32;public&#32;UUserWidget
15 {
16 &#32;&#32;&#32;&#32;GENERATED_BODY()
17 
18 <emphasis role="keyword">public</emphasis>:
19 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;NativeConstruct()&#32;<emphasis role="keyword">override</emphasis>;
20 
24 &#32;&#32;&#32;&#32;UFUNCTION(BlueprintCallable,&#32;Category&#32;=&#32;<emphasis role="stringliteral">&quot;Calendar&#32;Functions&quot;</emphasis>)
25 &#32;&#32;&#32;&#32;FDateTime&#32;GetTime();
26 
27 <emphasis role="keyword">protected</emphasis>:
29 &#32;&#32;&#32;&#32;UPROPERTY(BlueprintReadWrite,&#32;meta&#32;=&#32;(BindWidget),&#32;Category&#32;=&#32;<emphasis role="stringliteral">&quot;Atm0s&#32;Calendar&#32;Variables&quot;</emphasis>)
30 &#32;&#32;&#32;&#32;class&#32;UEditableTextBox*&#32;year;
31 
33 &#32;&#32;&#32;&#32;UPROPERTY(BlueprintReadWrite,&#32;meta&#32;=&#32;(BindWidget),&#32;Category&#32;=&#32;&quot;Atm0s&#32;Calendar&#32;Variables&quot;)
34 &#32;&#32;&#32;&#32;class&#32;UTextBlock*&#32;month;
35 
37 &#32;&#32;&#32;&#32;UPROPERTY(BlueprintReadWrite,&#32;meta&#32;=&#32;(BindWidget),&#32;Category&#32;=&#32;&quot;Atm0s&#32;Calendar&#32;Variables&quot;)
38 &#32;&#32;&#32;&#32;class&#32;UEditableTextBox*&#32;hour;
39 
41 &#32;&#32;&#32;&#32;UPROPERTY(BlueprintReadWrite,&#32;meta&#32;=&#32;(BindWidget),&#32;Category&#32;=&#32;&quot;Atm0s&#32;Calendar&#32;Variables&quot;)
42 &#32;&#32;&#32;&#32;class&#32;UEditableTextBox*&#32;minute;
43 
44 &#32;&#32;&#32;&#32;UPROPERTY(meta&#32;=&#32;(BindWidget))
45 &#32;&#32;&#32;&#32;class&#32;UButton*&#32;toggle_prev_month;
46 
47 &#32;&#32;&#32;&#32;UPROPERTY(meta&#32;=&#32;(BindWidget))
48 &#32;&#32;&#32;&#32;class&#32;UButton*&#32;toggle_next_month;
49 
50 &#32;&#32;&#32;&#32;UPROPERTY(meta&#32;=&#32;(BindWidget))
51 &#32;&#32;&#32;&#32;class&#32;UButton*&#32;MonthButton;
52 
53 &#32;&#32;&#32;&#32;UPROPERTY(meta&#32;=&#32;(BindWidget))
54 &#32;&#32;&#32;&#32;class&#32;UButton*&#32;HourButton;
55 
56 &#32;&#32;&#32;&#32;UPROPERTY(meta&#32;=&#32;(BindWidget))
57 &#32;&#32;&#32;&#32;class&#32;UButton*&#32;MinuteButton;
58 
59 &#32;&#32;&#32;&#32;UPROPERTY(meta&#32;=&#32;(BindWidget))
60 &#32;&#32;&#32;&#32;class&#32;UButton*&#32;weekdays_background;
61 
62 &#32;&#32;&#32;&#32;UPROPERTY(meta&#32;=&#32;(BindWidget))
63 &#32;&#32;&#32;&#32;class&#32;UButton*&#32;calendar_background;
64 
65 &#32;&#32;&#32;&#32;UPROPERTY(BlueprintReadWrite,&#32;meta&#32;=&#32;(BindWidget),&#32;Category&#32;=&#32;&quot;Atm0s&#32;Calendar&#32;Variables&quot;)
66 &#32;&#32;&#32;&#32;class&#32;UListView*&#32;ListViewCalendar;
67 
68 
69 
74 &#32;&#32;&#32;&#32;UFUNCTION(BlueprintCallable,&#32;Category&#32;=&#32;&quot;Calendar&#32;Functions&quot;)
75 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;PreCalendarConfig(FLinearColor&#32;SelectedGridColor&#32;=&#32;FLinearColor(1.0f,&#32;1.0f,&#32;1.0f,&#32;0.8f),
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FLinearColor&#32;EmptyGridColor&#32;=&#32;FLinearColor(0.0f,&#32;0.0f,&#32;0.0f,&#32;0.0f),
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FLinearColor&#32;GridColor&#32;=&#32;FLinearColor(0.45f,&#32;0.2f,&#32;0.1f,&#32;0.7f),
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FLinearColor&#32;CalendarBackground&#32;=&#32;FLinearColor(0.0f,&#32;0.0f,&#32;0.0f,&#32;0.0f),
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FLinearColor&#32;CalendarBackgroundBorder&#32;=&#32;FLinearColor(0.45f,&#32;0.2f,&#32;0.1f,&#32;0.7f),
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FLinearColor&#32;WeekdayHeadingColor&#32;=&#32;FLinearColor(0.0f,&#32;0.0f,&#32;0.0f,&#32;1.0f)
81 &#32;&#32;&#32;&#32;);
82 
87 &#32;&#32;&#32;&#32;UFUNCTION(BlueprintCallable,&#32;Category&#32;=&#32;&quot;Calendar&#32;Functions&quot;)
88 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetCornerRadii(const&#32;FVector4&amp;&#32;CalendarBorder,&#32;const&#32;FVector4&amp;&#32;WeekdayHeaderRadii);
89 
91 &#32;&#32;&#32;&#32;UFUNCTION(BlueprintCallable,&#32;Category&#32;=&#32;&quot;Calendar&#32;Functions&quot;)
92 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CreateCalendar();
93 
97 &#32;&#32;&#32;&#32;UFUNCTION(BlueprintCallable,&#32;Category&#32;=&#32;&quot;Calendar&#32;Functions&quot;)
98 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetYear(<emphasis role="keywordtype">int</emphasis>&#32;y);
99 
103 &#32;&#32;&#32;&#32;UFUNCTION(BlueprintCallable,&#32;Category&#32;=&#32;&quot;Calendar&#32;Functions&quot;)
104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetMonth(int32&#32;m);
105 
106 &#32;&#32;&#32;&#32;UFUNCTION()
107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleOnYearChanged(const&#32;FText&amp;&#32;Text,&#32;ETextCommit::Type&#32;CommitMethod);
108 
109 &#32;&#32;&#32;&#32;UFUNCTION()
110 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleMonthToggleButtonClick();
111 
112 &#32;&#32;&#32;&#32;UFUNCTION()
113 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleOnHourCommitted(const&#32;FText&amp;&#32;Text,&#32;ETextCommit::Type&#32;CommitMethod);
114 
115 &#32;&#32;&#32;&#32;UFUNCTION()
116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleOnHourChanged(const&#32;FText&amp;&#32;Text);
117 
118 &#32;&#32;&#32;&#32;UFUNCTION()
119 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleOnMinuteCommitted(const&#32;FText&amp;&#32;Text,&#32;ETextCommit::Type&#32;CommitMethod);
120 
121 &#32;&#32;&#32;&#32;UFUNCTION()
122 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleOnMinuteChanged(const&#32;FText&amp;&#32;Text);
123 
124 &#32;&#32;&#32;&#32;UFUNCTION()
125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ShowNextMonth();
126 
127 &#32;&#32;&#32;&#32;UFUNCTION()
128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ShowPrevMonth();
129 
130 &#32;&#32;&#32;&#32;FTimerHandle&#32;TickTimerHandle;
131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitializeHour();
132 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitializeMinute();
133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitializeYear(<emphasis role="keywordtype">int</emphasis>&#32;y);&#32;<emphasis role="comment">//&#32;set&#32;year&#32;from&#32;c++&#32;code</emphasis>
134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitializeMonth(<emphasis role="keywordtype">int</emphasis>&#32;m);&#32;<emphasis role="comment">//&#32;set&#32;month&#32;from&#32;c++&#32;code</emphasis>
135 
136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;DefaultMinuteTickInterval&#32;=&#32;0.01f;
137 
138 private:
139 &#32;&#32;&#32;&#32;FDateTime&#32;CurrentDateTime;
140 &#32;&#32;&#32;&#32;int32&#32;year_now;
141 &#32;&#32;&#32;&#32;int32&#32;month_now;
142 &#32;&#32;&#32;&#32;FString&#32;hour_now;
143 &#32;&#32;&#32;&#32;FString&#32;minute_now;
144 &#32;&#32;&#32;&#32;int32&#32;td_hour&#32;=&#32;0;
145 &#32;&#32;&#32;&#32;int32&#32;td_min&#32;=&#32;0;
146 &#32;&#32;&#32;&#32;FTimespan&#32;hourDifference;
147 &#32;&#32;&#32;&#32;FTimespan&#32;minuteDifference;
148 &#32;&#32;&#32;&#32;FLinearColor&#32;color1;
149 &#32;&#32;&#32;&#32;FLinearColor&#32;color2;
150 &#32;&#32;&#32;&#32;FLinearColor&#32;color3;
151 &#32;&#32;&#32;&#32;TMap&lt;FString,&#32;int32&gt;&#32;MonthMap2;
152 };
</programlisting></section>
